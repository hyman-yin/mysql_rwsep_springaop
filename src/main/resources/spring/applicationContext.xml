<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"  	xmlns:mongo="http://www.springframework.org/schema/data/mongo"		
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/jee 
			http://www.springframework.org/schema/jee/spring-jee-3.1.xsd 
		http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
		http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.1.xsd  
		http://www.springframework.org/schema/cache 
			http://www.springframework.org/schema/cache/spring-cache-3.1.xsd    
		http://www.springframework.org/schema/data/mongo
          	http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd  
		http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	<!-- 启用注解 -->
	<context:annotation-config />
	
	<!-- 自动扫描 -->
	<context:component-scan base-package="hyman.sr" />
	
	<!-- 自动代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!-- 引入配置文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置主从复制之后原来的DataSource就没有用了 -->
	<!-- 配置数据源datasource -->
	<!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>    
		<property name="url" value="${jdbc.url}"></property>    
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		配置初始化大小、最小、最大
        <property name="initialSize" value="10" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="20" />
        配置获取连接等待超时的时间
        <property name="maxWait" value="60000" />
        配置监控统计拦截的filters
  		<property name="filters" value="stat" />
    </bean> -->
    
    <!-- 配置主数据源datasource -->
	<bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.master.driver}"></property>    
		<property name="url" value="${jdbc.master.url}"></property>    
		<property name="username" value="${jdbc.master.username}"></property>
		<property name="password" value="${jdbc.master.password}"></property>
		<!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置监控统计拦截的filters -->
  		<property name="filters" value="stat,config" />
  		
  		<!-- 密码加密，明文显示不安全，由于配置了druid监控，因此把加密的filters和监控的配置在一起 -->
  		<!-- <property name="filters" value="config" /> -->  
     	<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${publicKey}" /> 
    </bean>

    <!-- 配置从数据源datasource -->
	<bean id="slave01DataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.slave01.driver}"></property>    
		<property name="url" value="${jdbc.slave01.url}"></property>    
		<property name="username" value="${jdbc.slave01.username}"></property>
		<property name="password" value="${jdbc.slave01.password}"></property>
		<!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置监控统计拦截的filters -->
  		<property name="filters" value="stat,config" />
  		
  		<!-- 密码加密，明文显示不安全，由于配置了druid监控，因此把加密的filters和监控的配置在一起 -->
  		<!-- <property name="filters" value="config" /> -->  
     	<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${publicKey}" /> 
    </bean>
    
    <!-- 配置从数据源datasource -->
	<bean id="slave02DataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.slave02.driver}"></property>    
		<property name="url" value="${jdbc.slave02.url}"></property>    
		<property name="username" value="${jdbc.slave02.username}"></property>
		<property name="password" value="${jdbc.slave02.password}"></property>
		<!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置监控统计拦截的filters -->
  		<property name="filters" value="stat,config" />
  		
  		<!-- 密码加密，明文显示不安全，由于配置了druid监控，因此把加密的filters和监控的配置在一起 -->
  		<!-- <property name="filters" value="config" /> -->  
     	<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${publicKey}" /> 
    </bean>
    
	<!-- 配置mybatis,不需要配置文件 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:mapper/*Mapper.xml"></property>
	</bean>
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="hyman.sr.mapper"></property>
	</bean>
	<!-- 配置mybatis完成 -->
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<!-- Hibernate配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
			</props>
		</property>


		<property name="packagesToScan">
			<list>
				<value>hyman.sr.model</value>
			</list>
		</property>
	</bean>
	
	
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
    
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 定义事务策略 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--所有以query开头的方法都是只读的 -->
            <tx:method name="query*" read-only="true" />
            <!--其他方法使用默认事务策略 -->
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>
    
    <!-- 定义AOP切面处理器 -->
    <bean class="hyman.sr.datasource.DataSourceAspect" id="dataSourceAspect">
        <!-- 注入事务策略 -->
        <property name="txAdvice" ref="txAdvice"/>
        <!-- 指定slave方法的前缀（非必须） -->
        <property name="slaveMethodStartWith" value="query,find,get"/>
    </bean>

    <aop:config>
        <aop:pointcut id="myPointcut" expression="execution(* hyman.sr.service.*.*(..))" />
        <!-- 将切面应用到自定义的切面处理器上，-9999保证该切面优先级最高执行 -->
        <aop:aspect ref="dataSourceAspect" order="-9999">
            <aop:before method="before" pointcut-ref="myPointcut" />
        </aop:aspect>
    </aop:config>
    
    <!-- 定义数据源，继承了spring的动态数据源 -->
    <bean id="dataSource" class="hyman.sr.datasource.DynamicDataSource">
        <!-- 设置多个数据源 -->
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <!-- 这些设置的key和determineCurrentLookupKey方法拿到的key相比对, 根据匹配选择数据源 -->
                <entry key="master" value-ref="masterDataSource"/>
                <entry key="slave01" value-ref="slave01DataSource"/>
                <entry key="slave02" value-ref="slave02DataSource"/>
            </map>
        </property>
        <!-- 设置默认的数据源，这里默认走写库 -->
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
    </bean>
	

</beans>